/**
 * Given two sequences, find the length of longest subsequence present in both 
 * of them. A subsequence is a sequence that appears in the same relative order, 
 * but not necessarily contiguous. For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, 
 * .. etc are subsequences of “abcdefg”.
 * 
 */

package DynamicProgramming;
/**
 *
 * @author Vishal Sharma
 */
public class LongestCommonSubsequence 
{
    public static void main(String args[])
    {
        String s2 = "asdddsbcdw";
        String s1 = "sxxxsbcdw";
        
        lcs(s1,s2);
    }

    private static void lcs(String s1, String s2) {
        
        int c[][] = new int[s1.length()+1][s2.length()+1];
        
        for(int i=1;i<=s1.length();i++)
        {
            for(int j=1;j<=s2.length();j++)
            {
                if(s1.charAt(i-1) == s2.charAt(j-1))
                {
                    c[i][j] = c[i-1][j-1]+1;
                }
                else
                {
                    c[i][j] = Math.max(c[i][j-1],c[i-1][j]);
                }
            }
        }
        
        //Prints the Table c[s1.length()][s2.length()] is the solution
        for(int i=0;i<=s1.length();i++)
        {
            for(int j=0;j<=s2.length();j++)
                System.out.print(c[i][j]+" ");
            System.out.println();
        }
    }
}
